SUMMARY

This is the JWST OTE commissioning target selection pipeline. It is used to 
identify point source calibrators for the various wavefront sensing & control 
operations required to commission the Optical Telescope Element (OTE). Each 
stage of OTE commissioning relies on the availability of a star of some 
brightness and isolation specification. Ideally, on any given calendar date 
there will be several target candidates meeting these criteria.

The pipeline carries out all-sky catalog queries (2MASS and GSC2) to 
derive preliminary lists of target candidates for each commissioning stage. 
These preliminary lists are then screened and sorted based on the stars' 
availability windows with respect to the JWST viewing zone, and properties 
indexed in CDS/SIMBAD. Finally the pipeline generates several plot and list 
products, so that the down-selected target candidates can be vetted further and 
integrated into the observing proposal framework for commissioning activities.

We expect that as WFS&C algorithms and procedures are refined and our 
knowledge of the response and operation parameters of the scientific instruments 
improve, the target criteria will change. Therefore, the pipeline was designed 
to simplify the process of tweaking the target properties. All top-level target 
criteria (brightness, isolation depth and radius, ecliptic latitude cutoff) are 
defined in a single file, and once the user modifies those specs, minimal 
interaction with script code is required to run the pipeline and regenerate the 
full suite of target products.

The initial release of the pipeline is built on code developed at Space 
Telescope Science Institute by Jay Anderson, Joseph Long, and Neil Zimmerman.

///////////////////////////////////////////////////////////////////////////////
Basic operation

The driver script, ote_target_tool_driver.py, is configured to loop through each
step of the selection pipeline for each major target category. Once you've 
followed the installation steps, then the full set of target list products,
based on the existing criteria, can be produced by simply executing this driver 
script from within the pipeline directory:

cd $OTE_TARGETS_PIPELINE
./ote_target_tool_driver.py

The high-level target specifications are controlled by a nested dictionary in 
list_specs.py, in terms of magnitude range, isolation delta mag, isolation 
radius, and ecliptic latitude. For example, one dictionary describes the 
criteria for the global alignment stage of OTE commissioning:

    'global_alignment': {
        'k_mag': (4.5, 5.5),
        'neighbors': (
            {'delta_k': 7, 'r_arcmin': 2.5},
        ),
        'elat': 85
    },

This dictionary tells the pipeline that these stars must fall in the 2MASS 
K-band magnitude range 4.5 to 5.5, and that neighbors within a radius of 2.5 
arcmin must be at least 7 magnitudes fainter. Furthermore, the optional 
ecliptic latitude (elat) spec restricts the search to stars within 5 degrees of 
the ecliptic poles, matching the continuous viewing zone of JWST.

Description of pipeline products

File organization

By default, the target selection pipeline writes all products to a subdirectory 
assigned its named based on the creation date and the OTE_TARGETS shell variable:
$OTE_TARGETS/target_lists_20XX-XX-XX/ The date label is intended to ease the 
task of archiving many iterations of target criteria, but it is otherwise left 
to the user to keep track of product versions.

The output files are split at the next directory level by target category, e.g.
$OTE_TARGETS/target_lists_20XX-XX-XX/early_comm/,
$OTE_TARGETS/target_lists_20XX-XX-XX/global_alignment/,
...

Files

The names of the target pipeline products are entirely set by the category key 
(global_alignment, for the example above). Modifications to the magnitude and 
isolation parameters do not change the names of the target products. Therefore, 
modifying target criteria and re-running the pipeline can overwrite existing 
target products.

Pipeline sub-components

1. list_builder.py
    This produces one or many target lists, depending on the hard-coded options
    in main. It takes no arguments, but directly reads the selection criteria
    defined in list_specs.py.
    
2. availability_checker.py
   Takes one of the target lists produced by list_builder as a command-line 
   argument.
   Plots the targets on the ecliptic sphere and animates the JWST viewing zone
   over a range of calendar dates. Stores the result as an mpeg or mp4 video.
   Makes a boolean table of availability of each target as a function of
   calendar date, stores as a numpy (.npy) file.
   
3. sort_targets.py
    Takes two command-line arguments: (1) A target list file from list_builder,
    and (2) the daily availibility .npy file from availability_checker.
    Writes tables of reduced subsets of targets meeting various criteria for
    minimum daily availability and ecliptic latitudes. (See header of this
    script for detailed description of the output products.)
    
4. write_gallery.py
    Generate an interactive html gallery of sky survey cutout images of each
    target in the reduced subset. The input argument is a list of 2MASS IDs,
    which sort_targets creates automatically for each reduced subset.
