# -*- coding: utf-8 -*-
# Neil Zimmerman
# Dec 2015
#
# Sort the targets based on availability, and then form a â€œreduced" target list
# containing the subset of stars with highest availability ensuring that two targets
# are available on any day of the year.
# Example usage:
# python sort_targets.py target_lists/coarse_phasing coarse_phasing_avail.npy
# The first argument is the original target list generated by list_builder, and
# the second argument is the Boolean numpy array created by the availability_checker.

import numpy as np
from astropy.table import Table
import glob
import matplotlib
from matplotlib import pyplot as plt
import sys

targets_fname = sys.argv[-2]
avail_fname = sys.argv[-1]

min_targets_per_day = 2

avail = np.load(avail_fname)
avail_1yr = avail[:,:365]

targets = Table.read(targets_fname, format='ascii')
N_targets_full = len(targets)

assert N_targets_full == avail.shape[0]

avail_col = Table.Column(avail_1yr, 'avail')
N_days_per_target = np.sum(avail_1yr, axis=1)
N_days_col = Table.Column(N_days_per_target, 'N_days')
targets.add_column(avail_col) 
targets.add_column(N_days_col)
targets.sort(keys='N_days')
targets.reverse()

total_avail_all = np.sum(avail_1yr, axis=0)
min_avail_all = total_avail_all.min()

print("Starting from a list of %d target stars." % N_targets_full)
print("On any day of the year, at least %d targets are available." % min_avail_all)


reduc_targets = Table(targets[0])

print("Best target:")
print reduc_targets

rr = 1
while np.sum(reduc_targets['avail'],axis=0).min() < min_targets_per_day and len(reduc_targets) < N_targets_full:
    reduc_targets.add_row(targets[rr])
    rr = rr + 1

N_stars_reduc = len(reduc_targets)
print("%d entries in reduced target list."%N_stars_reduc)

print reduc_targets

plt.figure(figsize=(12,12))
plt.imshow(reduc_targets['avail'], aspect='auto', interpolation='nearest')
plt.show()
